!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BULK	./bench/redis-client.js	/^    BULK      = exports.BULK      = "BULK",     $/;"	r
BulkReply	./bench/redis-node/replies/bulkReply.js	/^var BulkReply = exports.BulkReply = function BulkReply (client, context) {$/;"	r
COLON	./bench/redis-client.js	/^    COLON     = exports.COLON     = 0x3A, \/\/ :$/;"	r
COLON	./bench/redis-node/reply.js	/^    COLON     = 0x3A, \/\/ :$/;"	r
COMMAND_ORPHANED_ERROR	./bench/redis-client.js	/^exports.COMMAND_ORPHANED_ERROR = "connection lost before reply received";$/;"	r
COMMAND_ORPHANED_ERROR	./bench/redis-node/client.js	/^exports.COMMAND_ORPHANED_ERROR = "connection lost before reply received";$/;"	r
CR	./bench/redis-client.js	/^    CR        = exports.CR        = 0x0D, \/\/ \\r$/;"	r
CR	./bench/redis-node/reply.js	/^    CR        = exports.CR = 0x0D, \/\/ \\r$/;"	r
CRLF	./bench/redis-client.js	/^    CRLF = "\\r\\n",$/;"	r
CRLF	./bench/redis-node/client.js	/^    CRLF      = "\\r\\n";$/;"	r
CRLF	./bench/redis-node/command.js	/^    CRLF      = "\\r\\n";$/;"	r
CRLF_LEN	./bench/redis-client.js	/^    CRLF_LEN = 2,$/;"	r
Client	./bench/redis-client.js	/^function Client(stream, options) {$/;"	r
Client	./bench/redis-node/client.js	/^var Client = exports.Client = function Client (port, host, options) {$/;"	r
Command	./bench/redis-node/command.js	/^var Command = exports.Command = function (commandAsArray, client) {$/;"	r
DEFAULT_HOST	./bench/redis-client.js	/^exports.DEFAULT_HOST = '127.0.0.1';$/;"	r
DEFAULT_HOST	./bench/redis-node/redis.js	/^    DEFAULT_HOST = "127.0.0.1",$/;"	r
DEFAULT_OPTIONS	./bench/redis-node/client.js	/^Client.prototype.DEFAULT_OPTIONS = {$/;"	r
DEFAULT_PORT	./bench/redis-client.js	/^exports.DEFAULT_PORT = 6379;$/;"	r
DEFAULT_PORT	./bench/redis-node/redis.js	/^    DEFAULT_PORT = 6379;$/;"	r
DOLLAR	./bench/redis-client.js	/^    DOLLAR    = exports.DOLLAR    = 0x24, \/\/ \$$/;"	r
DOLLAR	./bench/redis-node/reply.js	/^    DOLLAR    = 0x24, \/\/ \$$/;"	r
ERROR	./bench/redis-client.js	/^    ERROR     = exports.ERROR     = "ERROR";    $/;"	r
Error	./bench/node_redis.js	/^        console.log("Error: " + err);$/;"	r
ErrorReply	./bench/redis-node/replies/errorReply.js	/^var ErrorReply = exports.ErrorReply = function ErrorReply (client) {$/;"	r
INLINE	./bench/redis-client.js	/^    INLINE    = exports.INLINE    = "INLINE",   $/;"	r
INTEGER	./bench/redis-client.js	/^    INTEGER   = exports.INTEGER   = "INTEGER",  $/;"	r
InlineReply	./bench/redis-node/replies/inlineReply.js	/^var InlineReply = exports.InlineReply = function InlineReply (client) {$/;"	r
IntegerReply	./bench/redis-node/replies/integerReply.js	/^var IntegerReply = exports.IntegerReply = function IntegerReply () {$/;"	r
LF	./bench/redis-client.js	/^    LF        = exports.LF        = 0x0A, \/\/ \\n$/;"	r
LF	./bench/redis-node/reply.js	/^    LF        = exports.LF = 0x0A; \/\/ \\n$/;"	r
MINUS	./bench/redis-client.js	/^    MINUS     = exports.MINUS     = 0x2D, \/\/ -$/;"	r
MINUS	./bench/redis-node/reply.js	/^    MINUS     = 0x2D, \/\/ -$/;"	r
MULTI	./bench/node_redis.js	/^RedisClient.prototype.MULTI = function (args) {$/;"	r
MULTIBULK	./bench/redis-client.js	/^    MULTIBULK = exports.MULTIBULK = "MULTIBULK",$/;"	r
Multi	./bench/node_redis.js	/^function Multi(client, args) {$/;"	r
MultibulkReply	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply = exports.MultibulkReply = function (client, context) {$/;"	r
NONE	./bench/redis-client.js	/^    NONE      = exports.NONE      = "NONE",$/;"	r
NO_CONNECTION_ERROR	./bench/redis-client.js	/^exports.NO_CONNECTION_ERROR = "failed to establish a connection to Redis";$/;"	r
NO_CONNECTION_ERROR	./bench/redis-node/client.js	/^exports.NO_CONNECTION_ERROR = "failed to establish a connection to Redis";$/;"	r
PLUS	./bench/redis-client.js	/^    PLUS      = exports.PLUS      = 0x2B, \/\/ +$/;"	r
PLUS	./bench/redis-node/reply.js	/^var PLUS      = 0x2B, \/\/ +$/;"	r
Queue	./bench/node_redis.js	/^var Queue = function () {$/;"	r
Queue	./bench/redis-node/client.js	/^var Queue = function () {$/;"	r
Queue	./utils.js	/^var Queue = function () {$/;"	r
RedisClient	./bench/node_redis.js	/^function RedisClient(stream) {$/;"	r
RedisClient	./index.js	/^var RedisClient = function RedisClient(port, host, auth) {$/;"	r
RedisParser	./parser.js	/^var RedisParser = function RedisParser () {$/;"	r
RedisReplyParser	./bench/node_redis.js	/^function RedisReplyParser() {$/;"	r
Reply	./bench/node_redis.js	/^        console.log("Reply: " + reply);$/;"	r
Reply	./bench/redis-node/reply.js	/^var Reply = exports.Reply = function Reply () {};$/;"	r
ReplyParser	./bench/redis-client.js	/^function ReplyParser(callback, thisArg) {$/;"	r
STAR	./bench/redis-client.js	/^    STAR      = exports.STAR      = 0x2A, \/\/ *$/;"	r
STAR	./bench/redis-node/reply.js	/^    STAR      = 0x2A, \/\/ *$/;"	r
_events	./bench/node_redis.js	/^    this.stream._events = {};$/;"	r
_flush	./index.js	/^  this._flush = function () {$/;"	r
_write	./index.js	/^RedisClient.prototype._write = function (data) {$/;"	r
add_multi_bulk_reply	./bench/node_redis.js	/^RedisReplyParser.prototype.add_multi_bulk_reply = function (reply) {$/;"	r
after	./test/main.js	/^  after: function () {$/;"	r
arch_bits	./bench/redis-client.js	/^    \/\/ , arch_bits: '64'$/;"	r
arch_bits	./bench/redis-client.js	/^    \/\/ arch_bits:64$/;"	r
args	./bench/redis-node/client.js	/^    var args = ["hmset", key];$/;"	r
args	./bench/redis-node/client.js	/^    var args = ["sort", key];$/;"	r
atDataIndex	./bench/redis-node/client.js	/^    var atDataIndex = 0,$/;"	r
atDataIndex	./bench/redis-node/client.js	/^\/\/        var atDataIndex = 0,$/;"	r
attemptReconnect	./bench/redis-node/client.js	/^Client.prototype.attemptReconnect = function () {$/;"	r
attempts	./bench/node_redis.js	/^    this.attempts = 1;$/;"	r
avg	./bench.js	/^      console.log(client_name + ' avg: ' + client.benches[bench]);$/;"	r
beforeSendCmd	./bench/redis-node/client.js	/^    beforeSendCmd: function (command) {$/;"	r
benches	./bench.js	/^  client.benches        = {};$/;"	r
benches	./bench.js	/^var benches = {$/;"	r
buffer	./bench.js	/^\/\/var buffer = 'Some some random text for the benchmark.';$/;"	r
buffer	./bench.js	/^\/\/var buffer = 'xxx';$/;"	r
bytesWritten	./bench/redis-node/replies/bulkReply.js	/^    this.bytesWritten = 0;$/;"	r
callbackCommandWithError	./bench/redis-client.js	/^Client.prototype.callbackCommandWithError = function (command, errorMessage) {$/;"	r
callbackCommandWithError	./bench/redis-node/client.js	/^Client.prototype.callbackCommandWithError = function (command, errorMessage) {$/;"	r
callbackOrphanedCommandsWithError	./bench/redis-client.js	/^Client.prototype.callbackOrphanedCommandsWithError = function () {$/;"	r
callbackOrphanedCommandsWithError	./bench/redis-node/client.js	/^Client.prototype.callbackOrphanedCommandsWithError = function () {$/;"	r
callbackQueuedCommandsWithError	./bench/redis-client.js	/^Client.prototype.callbackQueuedCommandsWithError = function () {$/;"	r
channelCallbacks	./bench/redis-client.js	/^    this.channelCallbacks = {};$/;"	r
channelCallbacks	./bench/redis-node/client.js	/^    this.channelCallbacks = {};$/;"	r
child2ArrayValue	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.child2ArrayValue = function () {$/;"	r
child2HashValue	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.child2HashValue = function () {$/;"	r
child2MessageValue	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.child2MessageValue = function () {$/;"	r
child2PMessageValue	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.child2PMessageValue = function () {$/;"	r
clearMultiBulkState	./bench/redis-client.js	/^ReplyParser.prototype.clearMultiBulkState = function () {$/;"	r
clearState	./bench/redis-client.js	/^ReplyParser.prototype.clearState = function () {$/;"	r
clients	./bench.js	/^var clients = { 'node-redis': redis.createClient(),  'node_redis':        redis2.createClient(),$/;"	r
close	./bench/redis-client.js	/^Client.prototype.close = function () {$/;"	r
close	./bench/redis-node/client.js	/^Client.prototype.close = function () {$/;"	r
cmdStr	./bench/redis-node/client.js	/^        cmdStr = "*" + (numArgs+1) + CRLF +      \/\/ Bulks to expect$/;"	r
cmdStr	./bench/redis-node/command.js	/^        cmdStr = "*" + (1 + numArgs) + CRLF +    \/\/ Bulks to expect; +1 for commandName$/;"	r
cmdsToRunAfterTxn	./bench/redis-node/client.js	/^    this.cmdsToRunAfterTxn = [];$/;"	r
command	./bench/node_redis.js	/^                console.log("Sending offline command: " + command_obj.command);$/;"	r
command	./bench/node_redis.js	/^            console.log("send command: " + command_str);$/;"	r
command	./index.js	/^      self.command = '';$/;"	r
command	./index.js	/^      this.command = '';$/;"	r
command	./index.js	/^  this.command        = '';$/;"	r
commandArgs	./bench/redis-node/client.js	/^            commandArgs = [commandName],$/;"	r
commandCallback	./bench/redis-node/command.js	/^commandCallback: function (err, reply) {$/;"	r
commandConfig	./bench/redis-node/commandConfig.js	/^var commandConfig = {$/;"	r
command_buffers	./index.js	/^var command_buffers = {};$/;"	r
command_obj	./bench/node_redis.js	/^    command_obj = {$/;"	r
command_str	./bench/node_redis.js	/^        elem_count, stream = this.stream, buffer_args, command_str = "";$/;"	r
command_str	./bench/node_redis.js	/^    command_str = "*" + elem_count + "\\r\\n$" + command.length + "\\r\\n" + command + "\\r\\n";$/;"	r
commands	./bench/node_redis.js	/^exports.commands = [$/;"	r
commands	./bench/redis-client.js	/^var commands = [ $/;"	r
commands	./index.js	/^exports.commands = [$/;"	r
commands_sent	./bench/node_redis.js	/^    this.commands_sent = 0;$/;"	r
connection_gone	./bench/node_redis.js	/^RedisClient.prototype.connection_gone = function (why) {$/;"	r
connections	./bench/node_redis.js	/^    this.connections = 0;$/;"	r
connectionsMade	./bench/redis-client.js	/^    this.connectionsMade = 0;$/;"	r
connectionsMade	./bench/redis-node/client.js	/^    this.connectionsMade = 0;$/;"	r
convertMultiBulkBuffersToUTF8Strings	./bench/redis-client.js	/^exports.convertMultiBulkBuffersToUTF8Strings = function (o) {$/;"	r
copyBuffer	./utils.js	/^exports.copyBuffer = function copyBuffer (source, target, start, s_start, s_end) {$/;"	r
createClient	./bench/node_redis.js	/^exports.createClient = function (port_arg, host_arg, options) {$/;"	r
createClient	./bench/redis-client.js	/^exports.createClient = function (port, host, options) {$/;"	r
createClient	./bench/redis-node/redis.js	/^exports.createClient = function (port, host, options) {$/;"	r
createClient	./index.js	/^exports.createClient = function createClient (port, host) {$/;"	r
currTxnCommands	./bench/redis-node/client.js	/^    this.currTxnCommands = []; \/\/ TODO Change [] to new Queue()$/;"	r
data	./parser.js	/^          this.data     = [];$/;"	r
data	./parser.js	/^          this.data = '';$/;"	r
data	./parser.js	/^        this.data = 'OK';$/;"	r
data	./parser.js	/^      this.data = '';$/;"	r
debugFilter	./bench/redis-client.js	/^function debugFilter(buffer, len) {$/;"	r
default	./bench/redis-client.js	/^ * - maxReconnectionAttempts (default: 10)$/;"	r
default_host	./bench/node_redis.js	/^    default_host = "127.0.0.1";$/;"	r
default_port	./bench/node_redis.js	/^    default_port = 6379,$/;"	r
del	./bench.js	/^  del: function (client, callback) {$/;"	r
destroy	./index.js	/^RedisClient.prototype.destroy = function () {$/;"	r
elem_count	./bench/node_redis.js	/^    elem_count = 1;$/;"	r
encoding	./bench/redis-node/command.js	/^    \/\/ Helps the client to accept the option {encoding: "binary"} for client.get$/;"	r
end	./bench.js	/^var end = function end () {$/;"	r
end	./bench/node_redis.js	/^                    this.return_buffer.end = 0;$/;"	r
end	./bench/node_redis.js	/^                this.return_buffer.end = 0;$/;"	r
end	./bench/node_redis.js	/^                this.tmp_buffer.end = 0;$/;"	r
end	./bench/node_redis.js	/^RedisClient.prototype.end = function () {$/;"	r
end	./index.js	/^RedisClient.prototype.quit = RedisClient.prototype.end = function () {$/;"	r
ensureSpaceFor	./bench/redis-client.js	/^    function ensureSpaceFor(atLeast) {$/;"	r
error	./bench/node_redis.js	/^            self.emit("error", new Error("Redis reply parser error: " + err.stack));$/;"	r
error	./bench/node_redis.js	/^        console.log("no callback to send error: " + sys.inspect(err));$/;"	r
error	./bench/redis-client.js	/^            sys.debug("[ERROR] Connection to redis encountered an error: " + e);$/;"	r
exec	./bench/node_redis.js	/^Multi.prototype.exec = function(callback) {$/;"	r
execute	./bench/node_redis.js	/^        \/\/ console.log("execute: " + this.state + ", " + pos + "\/" + incoming_buf.length + ", " + String.fromCharCode(incoming_buf[pos]));$/;"	r
execute	./bench/node_redis.js	/^RedisReplyParser.prototype.execute = function (incoming_buf) {$/;"	r
exists	./bench/redis-node/commandConfig.js	/^    exists: {$/;"	r
expectedBulks	./bench/redis-node/command.js	/^        expectedBulks = 1 + numArgs, \/\/ +1 for commandName$/;"	r
expectedProxy	./bench/redis-node/replies/bulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
expectedProxy	./bench/redis-node/replies/multibulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
exports	./bench/redis-node/commandList.js	/^module.exports = [$/;"	r
exports	./test/main.js	/^module.exports = {$/;"	r
extrasLength	./bench/redis-client.js	/^    var extrasLength = 5;   \/\/ '$', '\\r\\n', '\\r\\n'$/;"	r
feed	./bench/redis-client.js	/^ReplyParser.prototype.feed = function (inbound) {$/;"	r
flag	./parser.js	/^          this.flag      = 'BULK';$/;"	r
flag	./parser.js	/^          this.flag = 'BULK_LENGTH';$/;"	r
flag	./parser.js	/^        this.flag = 'BULK_LENGTH';$/;"	r
flag	./parser.js	/^        this.flag = 'ERROR';$/;"	r
flag	./parser.js	/^        this.flag = 'INTEGER';$/;"	r
flag	./parser.js	/^        this.flag = 'MULTI_BULK';$/;"	r
flag	./parser.js	/^        this.flag = 'SINGLE';$/;"	r
flag	./parser.js	/^        this.flag = 'TYPE';$/;"	r
flag	./parser.js	/^  this.flag      = 'TYPE';$/;"	r
flushQueuedCommands	./bench/redis-client.js	/^Client.prototype.flushQueuedCommands = function () {$/;"	r
flushQueuedCommands	./bench/redis-node/client.js	/^Client.prototype.flushQueuedCommands = function () {$/;"	r
forEach	./bench/node_redis.js	/^Queue.prototype.forEach = function (fn, thisv) {$/;"	r
fromTypeCode	./bench/redis-node/reply.js	/^Reply.fromTypeCode = function (typeCode, client, context) {$/;"	r
get	./bench.js	/^  get: function (client, callback) {$/;"	r
get	./bench/node_redis.js	/^    get: function () {$/;"	r
get	./bench/redis-node/client.js	/^    get: function () {$/;"	r
get	./utils.js	/^  get: function () {$/;"	r
getTransformerFromContext	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.getTransformerFromContext = function () {$/;"	r
giveupConnectionAttempts	./bench/redis-client.js	/^Client.prototype.giveupConnectionAttempts = function () {$/;"	r
giveupConnectionAttempts	./bench/redis-node/client.js	/^Client.prototype.giveupConnectionAttempts = function () {$/;"	r
handleData	./bench/redis-node/client.js	/^Client.prototype.handleData = function (data) {$/;"	r
handlePublishedMessage_	./bench/redis-client.js	/^Client.prototype.handlePublishedMessage_ = function (reply) {$/;"	r
handleReply	./bench/redis-node/client.js	/^Client.prototype.handleReply = function (reply, isParsingExecReply) {$/;"	r
hasBufferArgs	./bench/redis-node/command.js	/^hasBufferArgs: function () {$/;"	r
hash	./bench/redis-client.js	/^        var hash = {};$/;"	r
hash	./bench/redis-node/client.js	/^        var hash = {$/;"	r
hash	./bench/redis-node/command.js	/^    var hash = {$/;"	r
hash	./bench/redis-node/commandConfig.js	/^                    hash = {};$/;"	r
hmget	./bench.js	/^  hmget: function (client, callback) {$/;"	r
hmset	./bench.js	/^  hmset: function (client, callback) {$/;"	r
hmset	./bench/redis-node/client.js	/^Client.prototype.hmset = function (key, hash, callback) {$/;"	r
i	./bench.js	/^    for (var i = 0; i < iterations - 1; i++) {$/;"	r
i	./bench.js	/^  for (var i = 0, il = bench_keys.length; i < il; i++) {$/;"	r
i	./bench.js	/^  for (var i = 0; i < number; i++) {$/;"	r
i	./bench/node_redis.js	/^                    for (var i = 0, il = this.bulk_length; i < il; i++) {$/;"	r
i	./bench/node_redis.js	/^                for (i = 0, len = reply.length; i < len; i += 2) {$/;"	r
i	./bench/node_redis.js	/^        for (var i = 0, il = args.length, arg; i < il; i++) {$/;"	r
i	./bench/node_redis.js	/^        for (var i = 0, il = array.length; i < il; i++) {$/;"	r
i	./bench/node_redis.js	/^        for (var i = 1, il = self.queue.length, args; i < il; i++) {$/;"	r
i	./bench/node_redis.js	/^    for (i = 0; i < len; i += 1) {$/;"	r
i	./bench/node_redis.js	/^    for (var i = 0, il = buf.end; i < il; i++) {$/;"	r
i	./bench/redis-client.js	/^        for (var i=0; i<o.length; ++i) $/;"	r
i	./bench/redis-client.js	/^        for (var i=0; i<props.length; ++i) $/;"	r
i	./bench/redis-client.js	/^        for (var i=0; i<reply.value.length; i += 2) $/;"	r
i	./bench/redis-client.js	/^    for (var i=0, n=this.originalCommands.length; i<n; ++i) $/;"	r
i	./bench/redis-client.js	/^    for (var i=0, n=this.queuedOriginalCommands.length; i<n; ++i) $/;"	r
i	./bench/redis-client.js	/^    for (var i=0; i < inbound.length; ++i) {$/;"	r
i	./bench/redis-client.js	/^    for (var i=0; i<this.queuedRequestBuffers.length && this.stream.writable; ++i) {$/;"	r
i	./bench/redis-client.js	/^    for (var i=1; i < argCount; ++i) {$/;"	r
i	./bench/redis-node/client.js	/^            for (i = 0; i < numArgs; i++) {$/;"	r
i	./bench/redis-node/client.js	/^            for (var i = 0; i < numKeys; i++) {$/;"	r
i	./bench/redis-node/client.js	/^        for (i = 0; i < numArgs; i++) {$/;"	r
i	./bench/redis-node/client.js	/^        for (var i = 0, len = arguments.length; i < len; i++) {$/;"	r
i	./bench/redis-node/client.js	/^        i = 0, len = queuedCommands.length,$/;"	r
i	./bench/redis-node/client.js	/^    for (var i = 0, len = this.commandHistory.length; i < len; i++) {$/;"	r
i	./bench/redis-node/client.js	/^    var i = 0,$/;"	r
i	./bench/redis-node/command.js	/^        for (i = 0; i < numArgs; i++) {$/;"	r
i	./bench/redis-node/command.js	/^    for (var i = 0, len = args.length; i < len; i++) {$/;"	r
i	./bench/redis-node/commandConfig.js	/^            for (var i = 0, len = arr.length; i < len; i++) {$/;"	r
i	./bench/redis-node/perf.js	/^        i = 0;$/;"	r
i	./bench/redis-node/replies/bulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
i	./bench/redis-node/replies/inlineReply.js	/^    this.i = 0;$/;"	r
i	./bench/redis-node/replies/integerReply.js	/^    this.i = 0;$/;"	r
i	./bench/redis-node/replies/multibulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
i	./index.js	/^    for (i = 0, il = args_length; i < il; i++) {$/;"	r
i	./index.js	/^    for (var i = 0, il = commands.length; i < il; i++) {$/;"	r
i	./index.js	/^    for (var i = 0, il = self.send_buffer.length; i < il; i++) {$/;"	r
i	./parser.js	/^          for (var i = 0; i < this.last_data; i++) {$/;"	r
i	./test/main.js	/^    for (i = 0; i < 10000; i++) {$/;"	r
i	./test/main.js	/^    for (var i = 0; i < 10000; i++) {$/;"	r
i	./utils.js	/^    for (var i = 0, il = results.length; i < il; i++) {$/;"	r
i	./utils.js	/^  for (i = 0; i < len; i++) {$/;"	r
i	./utils.js	/^  for (var i = 0, il = string.length; i < il; i++) {$/;"	r
info	./bench/redis-client.js	/^        var info = {};$/;"	r
info	./bench/redis-node/commandConfig.js	/^            var info = {};$/;"	r
info	./bench/redis-node/commandConfig.js	/^    info: {$/;"	r
is	./bench/redis-client.js	/^    \/\/ Next is: "$<length of the command name>\\r\\n<command name>\\r\\n".$/;"	r
isHashValuable	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.isHashValuable = {$/;"	r
iterations	./bench.js	/^  iterations = 100;$/;"	r
iterations	./bench.js	/^var iterations = 5000,$/;"	r
j	./bench.js	/^    for (j = 0, jl = keys.length; j < jl; j++) {$/;"	r
j	./bench.js	/^    for (var j = 0, jl = keys.length; j < jl; j++) {$/;"	r
key1	./bench/redis-node/client.js	/^ * client.zunionstore("tokey", {key1: 4, key2: 7});$/;"	r
key1	./bench/redis-node/client.js	/^ * client.zunionstore("tokey", {key1: 4, key2: 7}, "max");$/;"	r
key1	./bench/redis-node/client.js	/^ * client.zunionstore("tokey", {key1: 4, key2: 7}, "min");$/;"	r
key1	./bench/redis-node/client.js	/^ * client.zunionstore("tokey", {key1: 4, key2: 7}, "sum");$/;"	r
length	./bench/node_redis.js	/^        tmp.length = 0;$/;"	r
length	./bench/redis-node/client.js	/^            client.currTxnCommands.length = 0; \/\/ TODO Queue$/;"	r
length	./bench/redis-node/client.js	/^        tmp.length = 0;$/;"	r
length	./index.js	/^    self.send_buffer.length = 0;$/;"	r
length	./utils.js	/^    this.array.length = 0;$/;"	r
like	./bench/redis-client.js	/^    \/\/ array like: [ {type:BULK, value:"foo"}, {type:BULK, value:"bar"} ]$/;"	r
log	./utils.js	/^exports.log = function log (error, results) {$/;"	r
lpush	./bench.js	/^  lpush: function (client, callback) {$/;"	r
lrange	./bench.js	/^  lrange: function (client, callback) {$/;"	r
makeErrorForCommand	./bench/redis-client.js	/^Client.prototype.makeErrorForCommand = function (command, errorMessage) {$/;"	r
maxReconnectionAttempts	./bench/redis-client.js	/^    this.maxReconnectionAttempts = 10;$/;"	r
maxReconnectionAttempts	./bench/redis-node/client.js	/^    maxReconnectionAttempts: 10,$/;"	r
max_size	./index.js	/^  this.max_size       = 500;$/;"	r
maybeAsNumber	./bench/redis-client.js	/^function maybeAsNumber(str) {$/;"	r
maybeCallbackWithReply	./bench/redis-client.js	/^        var maybeCallbackWithReply = function (reply) {$/;"	r
maybeConvertReplyValue	./bench/redis-client.js	/^function maybeConvertReplyValue(commandName, reply) {$/;"	r
maybeReconnect	./bench/redis-client.js	/^Client.prototype.maybeReconnect = function () {$/;"	r
multi	./bench/node_redis.js	/^RedisClient.prototype.multi = function (args) {$/;"	r
multi_bulk_length	./bench/node_redis.js	/^        this.multi_bulk_length = 0;$/;"	r
multi_bulk_length	./bench/node_redis.js	/^    this.multi_bulk_length = 0;$/;"	r
multi_bulk_nested_length	./bench/node_redis.js	/^            this.multi_bulk_nested_length = 0;$/;"	r
multi_bulk_nested_length	./bench/node_redis.js	/^    this.multi_bulk_nested_length = 0;$/;"	r
multi_bulk_replies	./bench/node_redis.js	/^                this.multi_bulk_replies = [];$/;"	r
multibulkReplies	./bench/redis-client.js	/^                        this.multibulkReplies = [];$/;"	r
multiplexing_api	./bench/redis-client.js	/^    \/\/ , multiplexing_api: 'kqueue'$/;"	r
n	./test/main.js	/^    var n = 0,$/;"	r
newArr	./bench/redis-node/commandConfig.js	/^            var arr = replyValue, hash, currKey, newArr = [];$/;"	r
newContext	./bench/redis-node/reply.js	/^        newContext = {};$/;"	r
noop	./utils.js	/^exports.noop = function () {};$/;"	r
numChildren	./bench/redis-node/replies/multibulkReply.js	/^                numChildren = this.numChildren = 0;$/;"	r
numKeys	./bench/redis-node/client.js	/^            numKeys = 0;$/;"	r
numUnackedCmds	./bench/redis-node/client.js	/^    numUnackedCmds: 0,$/;"	r
numUnackedTxnCmds	./bench/redis-node/client.js	/^        this.numUnackedTxnCmds = 0;$/;"	r
number	./bench.js	/^    number     = 3;$/;"	r
o	./test/main.js	/^        o = 0;$/;"	r
obj	./bench/node_redis.js	/^                obj = {};$/;"	r
offset	./bench/node_redis.js	/^        this.offset = 0;$/;"	r
offset	./bench/node_redis.js	/^    this.offset = 0;$/;"	r
offset	./bench/redis-node/client.js	/^        this.offset = 0;$/;"	r
offset	./bench/redis-node/client.js	/^    this.offset = 0;$/;"	r
offset	./utils.js	/^    this.offset       = 0;$/;"	r
offset	./utils.js	/^  this.offset = 0;$/;"	r
onClose	./index.js	/^  var onClose = function onClose () {$/;"	r
onData	./parser.js	/^RedisParser.prototype.onData = function onData () {$/;"	r
onDisconnect	./index.js	/^RedisClient.prototype.onDisconnect = function (error) {$/;"	r
onError	./parser.js	/^RedisParser.prototype.onError = function onError () {$/;"	r
onIncoming	./parser.js	/^RedisParser.prototype.onIncoming = function onIncoming (buffer) {$/;"	r
onReply_	./bench/redis-client.js	/^Client.prototype.onReply_ = function (reply) {$/;"	r
onTxnAck	./bench/redis-node/client.js	/^Client.prototype.onTxnAck = function (err, reply) {$/;"	r
on_data	./bench/node_redis.js	/^        console.log("on_data: " + data.toString());$/;"	r
on_data	./bench/node_redis.js	/^RedisClient.prototype.on_data = function (data) {$/;"	r
originalCommands	./bench/redis-client.js	/^                " originalCommands = " + this.originalCommands.length);$/;"	r
originalCommands	./bench/redis-client.js	/^        client.originalCommands = [];$/;"	r
originalCommands	./bench/redis-client.js	/^    this.originalCommands = [];$/;"	r
parse	./bench/redis-node/replies/bulkReply.js	/^BulkReply.prototype.parse = function (data, atDataIndex) {$/;"	r
parse	./bench/redis-node/replies/errorReply.js	/^ErrorReply.prototype.parse = function (data, atDataIndex) {$/;"	r
parse	./bench/redis-node/replies/inlineReply.js	/^InlineReply.prototype.parse = function (data, atDataIndex) {$/;"	r
parse	./bench/redis-node/replies/integerReply.js	/^IntegerReply.prototype.parse = function (data, atDataIndex) {$/;"	r
parse	./bench/redis-node/replies/multibulkReply.js	/^MultibulkReply.prototype.parse = function (data, atDataIndex) {$/;"	r
peek	./bench/redis-node/client.js	/^Queue.prototype.peek = function () {$/;"	r
per	./bench/redis-client.js	/^\/\/ callback function per subscribed channel name\/pattern.$/;"	r
pos	./bench/node_redis.js	/^    var pos = 0, bd_tmp, bd_str, i;$/;"	r
previous	./index.js	/^        previous  = '\\r\\n';$/;"	r
previous	./index.js	/^        previous = '';$/;"	r
previous	./index.js	/^        previous = '*' + (args_length + 1) + '\\r\\n' + '$' + command.length + '\\r\\n' + command + '\\r\\n';$/;"	r
print	./bench/node_redis.js	/^exports.print = function (err, reply) {$/;"	r
process_id	./bench/redis-client.js	/^    \/\/ , process_id: '11604'$/;"	r
process_id	./bench/redis-client.js	/^    \/\/ process_id:11604$/;"	r
prototype	./bench/redis-node/command.js	/^Command.prototype = {$/;"	r
push	./bench/node_redis.js	/^Queue.prototype.push = function (item) {$/;"	r
push	./bench/redis-node/client.js	/^Queue.prototype.push = function (item) {$/;"	r
push	./utils.js	/^Queue.prototype.push = function (item) {$/;"	r
queue	./bench/node_redis.js	/^    this.queue = [["MULTI"]];$/;"	r
queuedCommandBuffers	./bench/redis-node/client.js	/^\/\/    this.queuedCommandBuffers = [];$/;"	r
queuedOriginalCommands	./bench/redis-client.js	/^    this.queuedOriginalCommands = [];$/;"	r
queuedRequestBuffers	./bench/redis-client.js	/^    this.queuedRequestBuffers = [];$/;"	r
reconnectionAttempts	./bench/redis-client.js	/^        client.reconnectionAttempts = 0;$/;"	r
reconnectionAttempts	./bench/redis-client.js	/^    this.reconnectionAttempts = 0;$/;"	r
reconnectionAttempts	./bench/redis-node/client.js	/^        client.reconnectionAttempts = 0; \/\/ Reset to 0$/;"	r
reconnectionAttempts	./bench/redis-node/client.js	/^    reconnectionAttempts: 0,$/;"	r
reconnectionDelay	./bench/redis-client.js	/^        client.reconnectionDelay = 500;$/;"	r
reconnectionDelay	./bench/redis-client.js	/^    this.reconnectionDelay = 500;    \/\/ doubles, so starts at 1s delay$/;"	r
reconnectionDelay	./bench/redis-node/client.js	/^        client.reconnectionDelay = 500;$/;"	r
reconnectionDelay	./bench/redis-node/client.js	/^    reconnectionDelay: 500, \/\/ Doubles with every try$/;"	r
redis_version	./bench/redis-client.js	/^    \/\/ "redis_version:1.3.8$/;"	r
redis_version	./bench/redis-client.js	/^    \/\/ { redis_version: '1.3.8'$/;"	r
remaining	./bench/redis-client.js	/^                      ". queued buffers remaining = " + $/;"	r
replies	./parser.js	/^          this.replies  = [];$/;"	r
reply	./bench/node_redis.js	/^            console.log("no callback for reply: " + reply.toString());$/;"	r
reply	./bench/node_redis.js	/^            throw new Error("subscriptions are active but got an invalid reply: " + reply);$/;"	r
reply	./parser.js	/^          this.reply    = [];$/;"	r
replyValue	./bench/redis-node/replies/bulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
replyValue	./bench/redis-node/replies/inlineReply.js	/^    this.replyValue = "";$/;"	r
replyValue	./bench/redis-node/replies/integerReply.js	/^    this.replyValue = "";$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^                    this.replyValue = [];$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^                    this.replyValue = {};$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^            this.replyValue = [];$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^            this.replyValue = {};$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^        this.replyValue = [];$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^        this.replyValue = {};$/;"	r
replyValue	./bench/redis-node/replies/multibulkReply.js	/^    this.expectedProxy = {replyValue: "", i: 0, isComplete: false};$/;"	r
reset	./bench/node_redis.js	/^RedisReplyParser.prototype.reset = function() {$/;"	r
resetState	./parser.js	/^RedisParser.prototype.resetState = function resetState () {$/;"	r
results	./bench.js	/^      console.log(client_name + ' results: ' + client.benches[bench].join(', '));$/;"	r
ret	./bench/redis-node/perf.js	/^    var ret = "",$/;"	r
ret	./utils.js	/^    ret = [];$/;"	r
retry_attempts	./index.js	/^    self.retry_attempts = 0;$/;"	r
retry_attempts	./index.js	/^  this.retry_attempts = 0;$/;"	r
retry_backoff	./bench/node_redis.js	/^    this.retry_backoff = 1.7;$/;"	r
retry_backoff	./index.js	/^  this.retry_backoff  = 1.7;$/;"	r
retry_delay	./bench/node_redis.js	/^        self.retry_delay = 250;$/;"	r
retry_delay	./bench/node_redis.js	/^    this.retry_delay = 250;$/;"	r
retry_delay	./index.js	/^    self.retry_delay    = 250;$/;"	r
retry_delay	./index.js	/^  this.retry_delay    = 250;$/;"	r
return_error	./bench/node_redis.js	/^RedisClient.prototype.return_error = function (err) {$/;"	r
return_reply	./bench/node_redis.js	/^RedisClient.prototype.return_reply = function (reply) {$/;"	r
runPostTxnCommands	./bench/redis-node/client.js	/^Client.prototype.runPostTxnCommands = function () {$/;"	r
s	./bench.js	/^      console.log(client_name + ' ops\/s: ' + ((iterations \/ client.benches[bench]) * 1000));$/;"	r
sendCommand	./bench/redis-client.js	/^Client.prototype.sendCommand = function () {$/;"	r
sendCommand	./bench/redis-node/client.js	/^Client.prototype.sendCommand = function (args) {$/;"	r
sendCommand	./index.js	/^RedisClient.prototype.sendCommand = function (command, args, callback) {$/;"	r
sendExecToServer	./bench/redis-node/client.js	/^Client.prototype.sendExecToServer = function () {$/;"	r
sendMultiToServer	./bench/redis-node/client.js	/^Client.prototype.sendMultiToServer = function () {$/;"	r
send_buffer	./index.js	/^  this.send_buffer    = [];$/;"	r
send_command	./bench/node_redis.js	/^RedisClient.prototype.send_command = function () {$/;"	r
send_error	./bench/node_redis.js	/^RedisReplyParser.prototype.send_error = function (reply) {$/;"	r
send_reply	./bench/node_redis.js	/^RedisReplyParser.prototype.send_reply = function (reply) {$/;"	r
serialized	./bench/redis-client.js	/^            var serialized = '$' + Buffer.byteLength(asString, "binary") + CRLF + asString + CRLF;$/;"	r
server	./bench/node_redis.js	/^            console.warn("Connecting to redis server: " + msg);$/;"	r
set	./bench.js	/^  set: function (client, callback) {$/;"	r
shift	./bench/node_redis.js	/^Queue.prototype.shift = function () {$/;"	r
shift	./bench/redis-node/client.js	/^Queue.prototype.shift = function () {$/;"	r
shift	./utils.js	/^Queue.prototype.shift = function () {$/;"	r
skip	./bench/redis-client.js	/^                            this.skip = 1;  \/\/ skip LF$/;"	r
skip	./bench/redis-client.js	/^                        this.skip = 1;    \/\/ skip LF$/;"	r
skip	./bench/redis-client.js	/^            self.skip = 1; \/\/ Skip LF$/;"	r
skip	./bench/redis-client.js	/^    this.skip = 0;$/;"	r
small_toString	./bench/node_redis.js	/^function small_toString(buf) {$/;"	r
sort	./bench/redis-node/client.js	/^Client.prototype.sort = function (key, options, callback) {$/;"	r
state	./bench/node_redis.js	/^                    this.state = "bulk data";$/;"	r
state	./bench/node_redis.js	/^                    this.state = "final cr";$/;"	r
state	./bench/node_redis.js	/^                    this.state = "type";$/;"	r
state	./bench/node_redis.js	/^                this.state = "bulk length";$/;"	r
state	./bench/node_redis.js	/^                this.state = "bulk lf";$/;"	r
state	./bench/node_redis.js	/^                this.state = "error line";$/;"	r
state	./bench/node_redis.js	/^                this.state = "final cr";$/;"	r
state	./bench/node_redis.js	/^                this.state = "final lf";$/;"	r
state	./bench/node_redis.js	/^                this.state = "integer line";$/;"	r
state	./bench/node_redis.js	/^                this.state = "multi bulk count lf";$/;"	r
state	./bench/node_redis.js	/^                this.state = "multi bulk count";$/;"	r
state	./bench/node_redis.js	/^                this.state = "single line";$/;"	r
state	./bench/node_redis.js	/^                this.state = "type";$/;"	r
state	./bench/node_redis.js	/^                this.state = "unknown type";$/;"	r
state	./bench/node_redis.js	/^    this.state = "type";$/;"	r
state_times	./bench/node_redis.js	/^    \/\/, state_times = {}, start_execute = new Date(), start_switch, end_switch, old_state;$/;"	r
subscribeTo	./bench/redis-client.js	/^Client.prototype.subscribeTo = function (nameOrPattern, callback) {$/;"	r
subscribeTo	./bench/redis-node/client.js	/^Client.prototype.subscribeTo = function (nameOrPattern, callback) {$/;"	r
tail	./bench/node_redis.js	/^    this.tail = [];$/;"	r
tail	./bench/redis-node/client.js	/^    this.tail = [];$/;"	r
that	./bench/redis-client.js	/^\/\/ 'callback' is a function that is called back with 2 args: $/;"	r
that	./bench/redis-node/client.js	/^ * @param {Function} doStuffInsideTransaction is a function that wraps one or more commands that you want executed inside the transaction.$/;"	r
tmp	./bench/node_redis.js	/^    var tmp = "";$/;"	r
to	./bench/redis-node/client.js	/^        throw new Error("You must provide a callback function to subscribe");$/;"	r
toArray	./bench/redis-node/client.js	/^var toArray = function (args) {$/;"	r
toArray	./utils.js	/^var toArray = exports.toArray = function toArray (args) {$/;"	r
toHash	./bench/redis-node/command.js	/^toHash: function () {$/;"	r
toSmallString	./bench/redis-node/perf.js	/^exports.toSmallString = function (buffer, until) {$/;"	r
to_array	./bench/node_redis.js	/^function to_array(args) {$/;"	r
transaction	./bench/redis-node/client.js	/^Client.prototype.transaction = function (doStuffInsideTransaction) {$/;"	r
transactionManager	./bench/redis-node/client.js	/^var transactionManager = {$/;"	r
type2constructor	./bench/redis-node/reply.js	/^Reply.type2constructor = {};$/;"	r
typecastReplyValue	./bench/redis-node/commandConfig.js	/^        typecastReplyValue: function (replyValue) {$/;"	r
typecastReplyValue	./bench/redis-node/commandConfig.js	/^        typecastReplyValue: function (replyValue, originalCommand) {$/;"	r
unsubscribeFrom	./bench/redis-client.js	/^Client.prototype.unsubscribeFrom = function (nameOrPattern) {$/;"	r
unsubscribeFrom	./bench/redis-node/client.js	/^Client.prototype.unsubscribeFrom = function (nameOrPattern) {$/;"	r
valueBufferLen	./bench/redis-client.js	/^    this.valueBufferLen = 0;$/;"	r
weights	./bench/redis-node/client.js	/^            var weights = [];$/;"	r
write	./index.js	/^RedisClient.prototype.write = function write (data, buffer) {$/;"	r
writeBuffer	./utils.js	/^var writeBuffer = exports.writeBuffer = function writeBuffer (buffer, string, offset) {$/;"	r
writeCmdToStream	./bench/redis-node/client.js	/^Client.prototype.writeCmdToStream = function (commandAsArray) {$/;"	r
writeToStream	./bench/redis-node/command.js	/^writeToStream: function () {$/;"	r
zrange	./bench/redis-node/commandConfig.js	/^    zrange: {$/;"	r
